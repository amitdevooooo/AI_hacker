import logging
import requests
import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from googleapiclient.discovery import build

# ‚úÖ ‡§Ü‡§™‡§ï‡•á TOKEN ‡§î‡§∞ API_KEY
BOT_TOKEN = "7992369115:AAHClwij4Y1fjdTlHByn1_dwsQ5yhdsgh-4"
API_KEY = "AIzaSyAaq1cziEhGEYbhWl64zuykOROSiWFyRXQ"
GROUP_ID = "@ijijin900"

# ‚úÖ Google AI API ‡§∏‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§≤‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def ask_gemini(question):
    service = build("customsearch", "v1", developerKey=API_KEY)
    res = service.cse().list(q=question, cx="017576662512468239146:omuauf_lfve").execute()
    return res["items"][0]["snippet"] if "items" in res else "‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§"

# ‚úÖ Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üôè ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Æ‡•à‡§Ç Static GK Quiz Bot ‡§π‡•Ç‡§Å‡•§ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç /quiz ‡§Ø‡§æ /ask <‡§∏‡§µ‡§æ‡§≤>")

# ‚úÖ Help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/quiz - ‡§ï‡•ç‡§µ‡§ø‡§ú ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç\n/ask <‡§∏‡§µ‡§æ‡§≤> - ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç")

# ‚úÖ Auto quiz data (current affairs style)
quiz_data = [
    {
        "question": "‡§π‡§æ‡§≤ ‡§π‡•Ä ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§™‡§§‡§ø ‡§ï‡•å‡§® ‡§π‡•à‡§Ç?",
        "options": ["‡§∞‡§æ‡§Æ‡§®‡§æ‡§• ‡§ï‡•ã‡§µ‡§ø‡§Ç‡§¶", "‡§¶‡•ç‡§∞‡•å‡§™‡§¶‡•Ä ‡§Æ‡•Å‡§∞‡•ç‡§Æ‡•Ç", "‡§®‡§∞‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§Æ‡•ã‡§¶‡•Ä", "‡§Ö‡§Æ‡§ø‡§§ ‡§∂‡§æ‡§π"],
        "answer": "‡§¶‡•ç‡§∞‡•å‡§™‡§¶‡•Ä ‡§Æ‡•Å‡§∞‡•ç‡§Æ‡•Ç",
    },
    {
        "question": "‡§ö‡§Ç‡§¶‡•ç‡§∞‡§Ø‡§æ‡§®-3 ‡§ï‡§ø‡§∏ ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§≤‡•â‡§®‡•ç‡§ö ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ?",
        "options": ["NASA", "ISRO", "DRDO", "SpaceX"],
        "answer": "ISRO",
    },
    {
        "question": "G20 ‡§∏‡§Æ‡•ç‡§Æ‡•á‡§≤‡§® 2023 ‡§ï‡§π‡§æ‡§Å ‡§π‡•Å‡§Ü?",
        "options": ["‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä", "‡§Æ‡•Å‡§Ç‡§¨‡§à", "‡§¨‡•á‡§Ç‡§ó‡§≤‡•Å‡§∞‡•Å", "‡§ö‡•á‡§®‡•ç‡§®‡§à"],
        "answer": "‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä",
    },
]

# ‚úÖ Quiz ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ function
async def send_quiz(app):
    data = random.choice(quiz_data)
    options = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in data["options"]]
    reply_markup = InlineKeyboardMarkup(options)
    await app.bot.send_message(chat_id=GROUP_ID, text=f"üß† {data['question']}", reply_markup=reply_markup)
    app.bot_data["correct_answer"] = data["answer"]

# ‚úÖ Auto quiz ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ ‡§≠‡•á‡§ú‡§®‡§æ
async def auto_quiz(app):
    while True:
        await send_quiz(app)
        await asyncio.sleep(60)  # ‡§π‡§∞ 1 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á

# ‚úÖ Button click handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = query.data
    correct = context.bot_data.get("correct_answer", "")
    if selected == correct:
        await query.edit_message_text(f"‚úÖ ‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨: {selected}")
    else:
        await query.edit_message_text(f"‚ùå ‡§ó‡§≤‡§§! ‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§•‡§æ: {correct}")

# ‚úÖ Ask command (AI answer)
async def ask_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = " ".join(context.args)
    if not question:
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§∏‡§µ‡§æ‡§≤ ‡§≤‡§ø‡§ñ‡•á‡§Ç ‡§ú‡•à‡§∏‡•á: /ask ‡§≠‡§æ‡§∞‡§§ ‡§ï‡§æ ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§™‡§§‡§ø ‡§ï‡•å‡§® ‡§π‡•à?")
        return
    await update.message.reply_text("üß† ‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...")
    answer = ask_gemini(question)
    await update.message.reply_text(f"üîé ‡§â‡§§‡•ç‡§§‡§∞:\n{answer}")

# ‚úÖ Quiz command
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_quiz(context.application)

# ‚úÖ Main Function (‚ö†Ô∏è FIXED version)
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("quiz", quiz))
    app.add_handler(CommandHandler("ask", ask_ai))
    app.add_handler(CallbackQueryHandler(button_handler))

    # ‚úÖ FIXED JobQueue
    job_queue = app.job_queue
    job_queue.run_once(lambda context: asyncio.create_task(auto_quiz(app)), when=3)

    print("ü§ñ Bot ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à!")
    app.run_polling()

if __name__ == "__main__":
    main()
